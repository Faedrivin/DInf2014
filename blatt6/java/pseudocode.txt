// filled
Graph G
Vertexlist V
// empty
Path P, Cycle C

while |V| > 0                                          | O(1)...O(n)
  // remove vertices with indegree or outdegree of 0
  do                                                       | O(1)...O(n/2) (run loop once ... single chain graph) Avg?
    for each v in V with inDeg == 0 or outDeg == 0             | O(1) or O(n) (parallel or serial)
      remove v from V                                      
  while any v in V has inDeg == 0 or outDeg == 0                  

  // if there are vertices left, we have at least one cycle
  if |V| > 0
    empty P
    pick arbitrary v in V
    while v not in P                                       | O(2)...O(n)  (cycle of two nodes ... cycle of full graph) Avg?
      add v to P
      pick arbitrary followup v
    C = P from v to end                                    | O(1)
    new Vertex q
    for each inc arc of v in C                             | O(v) = O(2)...O(n)
      end arc at q
    for each out arc of v in C                             | O(v) = O(2)...O(n)
      start arc at q
    remove C from G
    add q to G
    empty P, C

Time complexity:
